/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package co.edu.unicauca.mvc.vistas.adminConferencia;

import co.edu.unicauca.mvc.utilities.FieldConfig;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 *
 * @author Default
 */
public abstract class RegisterWindow extends javax.swing.JFrame {

    protected JLabel titleLabel;
    protected HashMap<String, FieldConfig> fieldConfigs;
    /*
     * Creates new form VtnRegistrar
     * @param titleLabel
     * @param labelsText
     */
    public RegisterWindow(JLabel titleLabel, HashMap<String, FieldConfig> fieldConfigs) {
        this.titleLabel = titleLabel;
        this.fieldConfigs = fieldConfigs;
        showGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void showGui() {
    setLayout(new BorderLayout());
    Toolkit toolkit = Toolkit.getDefaultToolkit();
    Dimension screenSize = toolkit.getScreenSize();
    int screenHeight = screenSize.height;
    int screenWidth = screenSize.width;
    int panelHeight = (int) (screenHeight * 0.55);
    int panelWidth = (int) (screenWidth * 0.35);
    int panelNorthHeight = (int) (panelHeight * 0.15);
    int panelCenterHeight = (int) (panelHeight * 0.70);
    int panelSouthHeight = (int) (panelHeight * 0.15);
    setSize(panelWidth, panelHeight);
    
    JPanel panelNorth = new JPanel(new GridBagLayout());
    panelNorth.setPreferredSize(new Dimension(panelWidth, panelNorthHeight));
    
    int titleFontSize = Math.min(panelWidth, panelHeight) / 20;
    titleLabel.setForeground(Color.WHITE);
    titleLabel.setFont(new Font("Leelawadee UI", Font.BOLD, titleFontSize)); 
    panelNorth.add(titleLabel);
    panelNorth.setBackground(new Color(0x3c647c));
    
    JPanel panelCenter = new JPanel(new GridBagLayout());
    panelCenter.setBackground(new Color(0xD7EAF9));
    panelCenter.setPreferredSize(new Dimension(panelWidth, panelCenterHeight));

    int textFontSize = Math.min(panelWidth, panelHeight) / 30;
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(10, 10, 10, 10);
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.anchor = GridBagConstraints.CENTER;

    List<String> labelsText = new ArrayList<>(fieldConfigs.keySet());
    for (int i = 0; i < labelsText.size(); i++) {
        String labelText = labelsText.get(i);
        FieldConfig config = fieldConfigs.get(labelText);    
        JLabel jlabel = new JLabel(labelText, JLabel.CENTER);
        
        JComponent field = config.getFieldType(); 

        jlabel.setFont(new Font("Leelawadee UI", Font.BOLD, textFontSize));
        jlabel.setForeground(new Color(0X121C29));
        field.setFont(new Font("Leelawadee UI", Font.PLAIN, textFontSize));

        Dimension textFieldSize = new Dimension(panelWidth / 2, textFontSize * 2);
        field.setPreferredSize(textFieldSize);

        gbc.gridx = 0;
        gbc.gridy = i;
        gbc.weightx = 0.5;
        panelCenter.add(jlabel, gbc);

        gbc.gridx = 1;
        panelCenter.add(field, gbc);
    }

    int buttonFontSize = Math.min(panelWidth, panelHeight) / 30;
    
    try {
        BufferedImage iconRegister = ImageIO.read(getClass().getResource("/resources/save.png"));
        // Resize the image to font size
        Image iconScaled = iconRegister.getScaledInstance(buttonFontSize, buttonFontSize, Image.SCALE_SMOOTH);

        JButton registerButton = addButton(" Register", buttonFontSize);
        registerButton.setIcon(new ImageIcon(iconScaled));
        gbc.gridx = 0; 
        gbc.gridy = labelsText.size(); 
        gbc.gridwidth = 2; // Span both columns
        gbc.weightx = 1; // Distribute horizontal space
        gbc.anchor = GridBagConstraints.CENTER; // Center button horizontally
        gbc.fill = GridBagConstraints.NONE; // Do not expand button along the row
        
        registerButton.addActionListener(e -> registerAction());
        panelCenter.add(registerButton, gbc);
    } catch (IOException e) {}

    JPanel panelSouth = new JPanel();
    panelSouth.setBackground(new Color(0x7F818F));
    panelSouth.setPreferredSize(new Dimension(panelWidth, panelSouthHeight));
    
    this.getContentPane().add(panelSouth, BorderLayout.SOUTH);           
    this.getContentPane().add(panelCenter, BorderLayout.CENTER);
    this.getContentPane().add(panelNorth, BorderLayout.NORTH);
}

private JButton addButton(String buttonText, int fontSize) {
    JButton myButton = new JButton(buttonText);
    myButton.setBorderPainted(false);
    myButton.setBackground(new Color(0x2c4464)); // Return to transparent background
    myButton.setForeground(Color.WHITE);
    myButton.setFont(new Font("Lucida Console", Font.BOLD, fontSize)); // Font size doesn't matter
    myButton.setFocusPainted(false);
    myButton.setContentAreaFilled(false);
    myButton.setOpaque(true); // Make the button opaque from the start

    myButton.addMouseListener(new MouseAdapter() {
        @Override
        public void mouseEntered(MouseEvent e) {
            myButton.setBackground(new Color(52, 112, 224)); // Hover color with transparency
            myButton.repaint(); // Repaint the button
            myButton.getParent().repaint(); // Ensure the parent container is also repainted
            myButton.getParent().revalidate();
        }

        @Override
        public void mouseExited(MouseEvent e) {
            myButton.setBackground(new Color(0x2c4464)); // Return to transparent background
            myButton.repaint(); // Repaint the button and the container
            myButton.getParent().repaint(); // Ensure the parent container is also repainted
            myButton.getParent().revalidate();
        }

        @Override
        public void mouseClicked(MouseEvent e) {
            myButton.setBackground(new Color(52, 112, 224)); // Adjust background if needed
            myButton.repaint();
            myButton.getParent().repaint(); // Repaint the button's container
            myButton.getParent().revalidate(); // Revalidate the container's layout
        }
    });
    
    return myButton;
}

protected abstract void registerAction();


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
