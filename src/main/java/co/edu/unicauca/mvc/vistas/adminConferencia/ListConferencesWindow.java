/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package co.edu.unicauca.mvc.vistas.adminConferencia;

import co.edu.unicauca.mvc.controllers.StorageService;
import co.edu.unicauca.mvc.dataAccess.MemoryArrayListRepository;
import co.edu.unicauca.mvc.models.Article;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import javax.swing.JFrame;
import javax.swing.table.DefaultTableModel;
import co.edu.unicauca.mvc.models.Conference;
import co.edu.unicauca.mvc.models.Organizer;
import co.edu.unicauca.mvc.vistas.util.ButtonEditor;
import co.edu.unicauca.mvc.vistas.util.ButtonRenderer;
import java.util.HashMap;
import javax.swing.JCheckBox;

/**
 *
 * @author Default
 */
public class ListConferencesWindow extends ListWindow {

    private final StorageService<Conference> objStorageService;

    /**
     * Creates new form VtnListarArticulos
     * @param objStorageService
     */
    public ListConferencesWindow(MainAdminWindow adminWindow, StorageService<Conference> objStorageService) {
        super("Listado de Conferencias", "Registrar Conferencias", 
                new String[]{"Nombre", "Fecha Inicio", "Fecha Fin", "Costo", "Ubicacion","Temas", "Ingresar"});
        this.objStorageService=objStorageService;

        //Create the storage services related to the conference (CODE COULD BE GENERIC WITH TEST SIMILAR CODE)
        //We use a HASHMAP to prevent conflicts to include more events
        HashMap<Class<?>, StorageService<?>> serviceMap = new HashMap<>();
        
        MemoryArrayListRepository<Organizer> organizerRepository = new MemoryArrayListRepository<>();
        StorageService<Organizer> organizerService = new StorageService<>(organizerRepository);
        serviceMap.put(Organizer.class, organizerService);

        MemoryArrayListRepository<Article> articleRepository = new MemoryArrayListRepository<>();
        StorageService<Article> articleService = new StorageService<>(articleRepository);
        serviceMap.put(Article.class, articleService);
        
        for (Class<?> entityType : serviceMap.keySet()) {
            adminWindow.associateService(entityType, serviceMap.get(entityType));
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 394, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 274, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    @Override 
    protected void updateAction() {                                                 
        fillTable();
    }   

    @Override
    protected void registerAction(){
        RegisterConferenceWindow registerConferenceWindow =
        new RegisterConferenceWindow(objStorageService);
        registerConferenceWindow.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        registerConferenceWindow.setVisible(true);       
    }

    public void clearTable(){

        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        int rows = this.table.getRowCount();
        for (int i = 0; rows > i; i++) {
            model.removeRow(0);
        }        
    }

    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        clearTable();
        ArrayList<Conference> conferenceList = (ArrayList<Conference>) objStorageService.listAll();
        SimpleDateFormat formatter = new SimpleDateFormat("dd/MM/yyyy");

        for (int i = 0; i < conferenceList.size(); i++) {
            String[] row = {
                conferenceList.get(i).getName(), 
                formatter.format(conferenceList.get(i).getStartDate()), 
                formatter.format(conferenceList.get(i).getEndDate()), 
                conferenceList.get(i).getRegistrationCost() + "",
                conferenceList.get(i).getLocation(),
                conferenceList.get(i).topicsToString(), 
                "Seleccionar"
            };
            model.addRow(row);
        }
    table.getColumnModel().getColumn(6).setCellRenderer(new ButtonRenderer());
    table.getColumnModel().getColumn(6).setCellEditor(new ButtonEditor(new JCheckBox(), table));

    }
    
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
