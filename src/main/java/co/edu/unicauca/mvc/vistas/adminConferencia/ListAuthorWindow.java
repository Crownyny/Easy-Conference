/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package co.edu.unicauca.mvc.vistas.adminConferencia;

import co.edu.unicauca.mvc.controllers.StorageService;
import co.edu.unicauca.mvc.dataAccess.GeneralRepository;
import co.edu.unicauca.mvc.infrastructure.Observer;
import co.edu.unicauca.mvc.models.Author;
import co.edu.unicauca.mvc.utilities.Elements;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;

/**
 *
 * @author Default
 */
public class ListAuthorWindow extends javax.swing.JFrame implements Observer{
    private final StorageService<Author> tempAuthors;
    protected JLabel titleLabel;
    protected String registerButtonText;
    protected String[] columnNames;
    protected JTable table;

    /**
     * Creates new form VtnListarArticulos
     * @param tempAuthors
     */
    public ListAuthorWindow(StorageService<Author> tempAuthors) {
        this.tempAuthors = tempAuthors;
        titleLabel = new JLabel("Listado de autores");
        registerButtonText = "Registrar autor";
        columnNames = new String[]{"Nombre", "Apellido", "Email", "Tipo de autor"};
        Object[][] data ={};
        this.table = new JTable();
        this.table.setModel(new javax.swing.table.DefaultTableModel(data, columnNames));
        showGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void showGui() {
        // Set up the window size
        setLayout(new BorderLayout());
        Toolkit toolkit = Toolkit.getDefaultToolkit();
        Dimension screenSize = toolkit.getScreenSize();
        int screenHeight = screenSize.height;
        int screenWidth = screenSize.width;
        int panelHeight = (int) (screenHeight * 0.6);
        int panelWidth = (int) (screenWidth * 0.55);
        int panelNorthHeight = (int) (panelHeight * 0.1);
        int panelCenterHeight = (int) (panelHeight * 0.85);
        int panelSouthHeight = (int) (panelHeight * 0.15);

        this.setSize(panelWidth, panelHeight);
        GridBagConstraints gbc = new GridBagConstraints();

        JPanel panelNorth = new JPanel(new GridBagLayout());
        panelNorth.setPreferredSize(new Dimension(panelWidth, panelNorthHeight));

        int titleFontSize = Math.min(panelWidth, panelHeight) / 25;
        this.titleLabel.setForeground(Color.WHITE);
        this.titleLabel.setFont(new Font("Leelawadee UI", Font.BOLD, titleFontSize)); 
        panelNorth.add(titleLabel);
        panelNorth.setBackground(new Color(0x3c647c));

        JPanel panelCenter = new JPanel(new GridBagLayout());
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(5, 5, 5, 5);
        int buttonFontSize = Math.min(panelWidth, panelHeight) / 30;

        try {
            BufferedImage iconRegister = ImageIO.read(getClass().getResource("/resources/pen-drawing.png"));
            // Resize the images to font size
            Image iconRegisterScaled = iconRegister.getScaledInstance(buttonFontSize, buttonFontSize, Image.SCALE_SMOOTH);

            JButton registerButton = Elements.addButton(new JButton(" Registrar"), buttonFontSize);
            registerButton.setIcon(new ImageIcon(iconRegisterScaled)); 
            gbc.gridx = 1; // Column 1
            gbc.gridy = 0; // Row 0
            gbc.gridwidth = 1; // Occupies 1 column
            gbc.weightx = 1; // Half of the horizontal space  
            registerButton.addActionListener(e -> registerAction());    
            panelCenter.add(registerButton, gbc);

        } catch (IOException e) {}

        // Customize the header renderer
        JTableHeader header = this.table.getTableHeader();
        header.setDefaultRenderer(new DefaultTableCellRenderer() {
            @Override
            public Component getTableCellRendererComponent(JTable table, Object value,
                                                           boolean isSelected, boolean hasFocus, int row, int column) {
                JLabel label = (JLabel) super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);
                label.setBackground(new Color(0x3c647c)); 
                label.setForeground(Color.WHITE); 
                label.setFont(new Font("Leelawadee UI", Font.BOLD, Math.min(panelWidth, panelHeight) / 35)); // Font size
                label.setHorizontalAlignment(SwingConstants.CENTER); // Center the text
                return label;
            }
        });

        // Customize cell renderer for centering text
        DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
        centerRenderer.setHorizontalAlignment(SwingConstants.CENTER);

        // Apply centered renderer to all columns in the table
        for (int i = 0; i < this.table.getColumnCount(); i++) {
            this.table.getColumnModel().getColumn(i).setCellRenderer(centerRenderer);
        }

        JScrollPane tableScrollPane = new JScrollPane(table);
        gbc.gridx = 0; // Column 0
        gbc.gridy = 1; // Row 1
        gbc.gridwidth = 2; // Occupies 2 columns
        gbc.weightx = 1.0; // Horizontal space distribution
        gbc.weighty = 1.0; // Vertical space distribution
        gbc.fill = GridBagConstraints.BOTH; // Table takes up all space
        panelCenter.add(tableScrollPane, gbc);
        panelCenter.setBackground(new Color(0xD7EAF9));
        panelCenter.setPreferredSize(new Dimension(panelWidth, panelCenterHeight));

        JPanel panelSouth = new JPanel();
        panelSouth.setBackground(new Color(0x7F818F));
        panelSouth.setPreferredSize(new Dimension(panelWidth, panelSouthHeight));

        this.getContentPane().add(panelSouth, BorderLayout.SOUTH);           
        this.getContentPane().add(panelCenter, BorderLayout.CENTER);
        this.getContentPane().add(panelNorth, BorderLayout.NORTH);

    }

    protected void registerAction() {
        RegisterAuthorWindow objVtnRegisterArticle =
            new RegisterAuthorWindow(tempAuthors);
        objVtnRegisterArticle.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        objVtnRegisterArticle.setVisible(true);       
    }

    public void clearTable() {
        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        int rows = this.table.getRowCount();
        for (int i = 0; i < rows; i++) {
            model.removeRow(0);
        }        
    }

    private void fillTable() {
        DefaultTableModel model = (DefaultTableModel) this.table.getModel();
        clearTable();
        ArrayList<Author> authorList = (ArrayList<Author>) tempAuthors.listAll();// Fix show all 

        for (Author author : authorList) {
            String[] row = { 
                author.getFirstName(),
                author.getLastName(),
                author.getMail(),
                author.getTypeAuthor()
            };
            model.addRow(row);
        }
    }

    @Override
    public void update() {
        fillTable();
        System.out.println("Se hiso la observacion");
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
