
package co.edu.unicauca.mvc.vistas.adminConferencia;

import co.edu.unicauca.mvc.controladores.ServicioAlmacenamientoArticulos;
import co.edu.unicauca.mvc.controladores.ServicioAlmacenamientoConferencias;
import co.edu.unicauca.mvc.controladores.ServicioAlmacenamientoOrganizadores;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Image;
import java.awt.Insets;
import java.awt.Toolkit;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.HashMap;
import java.util.Map;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JDesktopPane;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;


/**
 *
 * @author Default
 */
public class VtnPrincipalAdmin extends javax.swing.JFrame {

    private final Map<Class<? extends JInternalFrame>, JInternalFrame> internalFrames = new HashMap<>();
    private final Map<Class<?>, Object> servicios = new HashMap<>();
    private JDesktopPane jDesktopPanelPrincipal;

    public void asociarServicio(Class<?> servicioClass, Object objServicio) {
        servicios.put(servicioClass, objServicio);
        relacionarInternalFramesConJDesktopPane();
    }

    private void relacionarInternalFramesConJDesktopPane() {
        // Limpiar el JDesktopPane
        jDesktopPanelPrincipal.removeAll();

        // Agregar frames según el servicio asociado
        if (!internalFrames.containsKey(VtnVerEstadisticas.class)) {
            internalFrames.put(VtnVerEstadisticas.class, new VtnVerEstadisticas());
        }
        jDesktopPanelPrincipal.add(internalFrames.get(VtnVerEstadisticas.class));

        if (!internalFrames.containsKey(VtnVerArticulosEnviadosConferencias.class)) {
            internalFrames.put(VtnVerArticulosEnviadosConferencias.class, new VtnVerArticulosEnviadosConferencias());
        }
        jDesktopPanelPrincipal.add(internalFrames.get(VtnVerArticulosEnviadosConferencias.class));

        
        if (servicios.containsKey(ServicioAlmacenamientoConferencias.class)) {
            if (!internalFrames.containsKey(VtnListarConferencias.class)) {
                internalFrames.put(VtnListarConferencias.class, new VtnListarConferencias((ServicioAlmacenamientoConferencias) servicios.get(ServicioAlmacenamientoConferencias.class)));
            }
            jDesktopPanelPrincipal.add(internalFrames.get(VtnListarConferencias.class));
        }

        if (servicios.containsKey(ServicioAlmacenamientoOrganizadores.class)) {
            if (!internalFrames.containsKey(VtnListarOrganizadores.class)) {
                internalFrames.put(VtnListarOrganizadores.class, new VtnListarOrganizadores((ServicioAlmacenamientoOrganizadores) servicios.get(ServicioAlmacenamientoOrganizadores.class)));
            }
            jDesktopPanelPrincipal.add(internalFrames.get(VtnListarOrganizadores.class));
        }

        if (servicios.containsKey(ServicioAlmacenamientoArticulos.class)) {
            if (!internalFrames.containsKey(VtnListarArticulos.class)) {
                internalFrames.put(VtnListarArticulos.class, new VtnListarArticulos((ServicioAlmacenamientoArticulos) servicios.get(ServicioAlmacenamientoArticulos.class)));
            }
            jDesktopPanelPrincipal.add(internalFrames.get(VtnListarArticulos.class));
        }
    }

    public VtnPrincipalAdmin() {
        showGui();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void showGui() {
    // Maximize the window and remove decorations
    this.setExtendedState(JFrame.MAXIMIZED_BOTH);
    this.getContentPane().setLayout(new BorderLayout());

    Toolkit toolkit = Toolkit.getDefaultToolkit();
    Dimension screenSize = toolkit.getScreenSize();
    int screenHeight = screenSize.height;

    // Create and configure North panel
    JPanel panelNorth = new JPanel();
    panelNorth.setBackground(new Color(0xD7EAF9));
    panelNorth.setLayout(new GridBagLayout());
    int panelNorthHeight = (int) (screenHeight * 0.2);
    panelNorth.setPreferredSize(new Dimension(screenSize.width, panelNorthHeight));

    GridBagConstraints gbc = new GridBagConstraints();
    gbc.gridx = 0;
    gbc.fill = GridBagConstraints.NONE;
    gbc.anchor = GridBagConstraints.CENTER;
    gbc.weightx = 1.0;
    gbc.insets = new Insets((int) (panelNorthHeight * 0.01), 0, (int) (panelNorthHeight * 0.1), 0); // Padding

    // Add title label to the North panel
    JLabel titleLabel = new JLabel("");
    setLabel(titleLabel,"EASY CONFERENCE", (int) (panelNorthHeight * 0.18), new Color(0x2c4464));
    panelNorth.add(titleLabel, gbc);

    // Configure GridBagConstraints for buttons
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.anchor = GridBagConstraints.CENTER;

    // Create and configure buttons panel
    JPanel buttonsPanel = new JPanel();
    buttonsPanel.setBackground(new Color(0xD7EAF9));
    buttonsPanel.setLayout(new BoxLayout(buttonsPanel, BoxLayout.X_AXIS)); // Horizontal layout
    buttonsPanel.add(Box.createHorizontalGlue()); // Push buttons to center

    // Add buttons to the buttons panel
    JButton conferenciasGestionButton = addButton("Gestionar conferencias", buttonsPanel);
    conferenciasGestionButton.addActionListener(e -> setVisibility(VisibilityState.LISTAR_CONFERENCIAS));

    JButton organizadoresGestionButton = addButton("Gestionar organizadores", buttonsPanel);
    organizadoresGestionButton.addActionListener(e -> setVisibility(VisibilityState.LISTAR_ORGANIZADORES));

    JButton articulosGestionButton = addButton("Gestionar artículos", buttonsPanel);
    articulosGestionButton.addActionListener(e -> setVisibility(VisibilityState.LISTAR_ARTICULOS));

    JButton articulosHistorialButton = addButton("Ver artículos enviados", buttonsPanel);
    articulosHistorialButton.addActionListener(e -> setVisibility(VisibilityState.VER_PRESTAMOS));

    JButton estadisticasButton = addButton("Ver estadísticas", buttonsPanel);
    estadisticasButton.addActionListener(e -> setVisibility(VisibilityState.VER_ESTADISTICAS));

    buttonsPanel.add(Box.createHorizontalGlue()); // Push buttons to center

    panelNorth.add(buttonsPanel, gbc);

    // Create and configure Center panel
    jDesktopPanelPrincipal = new JDesktopPane(); // Create the JDesktopPane
    JPanel panelCenter = new JPanel(new BorderLayout());
    panelCenter.setBackground(Color.GREEN);
    panelCenter.add(jDesktopPanelPrincipal, BorderLayout.CENTER); // Add JDesktopPane to Center panel

    // Create and configure South panel
    JPanel panelSouth = new JPanel();
    panelSouth.setBackground(new Color(0x696A78));
    int panelSouthHeight = (int) (screenHeight * 0.1);
    panelSouth.setPreferredSize(new Dimension(screenSize.width, panelSouthHeight));
    JLabel logoLabel = new JLabel("");
    setOrgIcon(logoLabel, "/recursos/logo.png", "", (int) (panelNorthHeight * 0.18), new Color(0x2c4464));
    panelSouth.add(logoLabel, gbc);
    // Add panels to the content pane
    this.getContentPane().add(panelNorth, BorderLayout.NORTH);
    this.getContentPane().add(panelCenter, BorderLayout.CENTER);
    this.getContentPane().add(panelSouth, BorderLayout.SOUTH);

    // Add ComponentListener to adjust font size dynamically
    this.addComponentListener(new ComponentAdapter() {
        @Override
        public void componentResized(ComponentEvent e) {
            adjustFontSize(titleLabel, buttonsPanel);
        }
    });
}


    private void adjustFontSize(JLabel label, JPanel buttonsPanel) {
        // Get current window size
        int width = this.getWidth();
        int height = this.getHeight();

        // Adjust title label font size
        int titleFontSize = Math.min(width, height) / 30; 
        label.setFont(new Font("Leelawadee UI", Font.BOLD, titleFontSize));

        // Adjust button font size
        Component[] components = buttonsPanel.getComponents();
        int buttonFontSize = Math.min(width, height) / 48; 
        for (Component component : components) {
            if (component instanceof JButton button) {
                button.setFont(new Font("Cascadia Code", Font.PLAIN, buttonFontSize));
            }
        }

        // Revalidate and repaint to update layout and centering
        buttonsPanel.revalidate();
        buttonsPanel.repaint();
    }
    
    private void setOrgIcon(JLabel label, String source, String text,int fontsize, Color textColor)
    {
        Image img1= new ImageIcon(getClass().getResource(source)).getImage();
        ImageIcon img2=new ImageIcon(img1.getScaledInstance(40, 40, Image.SCALE_SMOOTH));
        label.setIcon(img2);
        label.setText("<html><center>" + text + "</center></html>");
        label.setFont(new Font("Lucida Console", Font.BOLD, fontsize));
        label.setForeground(textColor);
    }
    
    private void setLabel(JLabel label, String text,int fontsize, Color textColor)
    {
        label.setText("<html><center>" + text + "</center></html>");
        label.setFont(new Font("Lucida Console", Font.BOLD, fontsize));
        label.setForeground(textColor);
    }    
    
    private JButton addButton(String buttonText, JPanel container)
    {
        JButton myButton = new JButton(buttonText);
        container.add(myButton);
        container.add(Box.createHorizontalStrut(20)); 
        myButton.setBorderPainted(false);
        myButton.setBackground(new Color(0x2c4464)); // Return to transparent background
        myButton.setForeground(Color.WHITE);
        myButton.setFont(new Font("Lucida Console", Font.BOLD, 1)); // Fontsize doesnt matter
        myButton.setFocusPainted(false);
        myButton.setContentAreaFilled(false);
        myButton.setOpaque(true); // Make the button opaque from the start

        myButton.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent e) {
                myButton.setBackground(new Color(52, 112, 224)); // Hover color with transparency
                myButton.repaint(); // Repaint the button
                myButton.getParent().repaint(); // Ensure the parent container is also repainted
                myButton.getParent().revalidate();
            }

            @Override
            public void mouseExited(MouseEvent e) {
                myButton.setBackground(new Color(0x2c4464)); // Return to transparent background
                myButton.repaint(); // Repaint the button and the container
                myButton.getParent().repaint(); // Ensure the parent container is also repainted
                myButton.getParent().revalidate();
            }

            @Override
            public void mouseClicked(MouseEvent e) {
                myButton.setBackground(new Color(52, 112, 224)); // Ajusta el fondo si es necesario
                myButton.repaint();
                myButton.getParent().repaint(); // Repinta el contenedor del botón
                myButton.getParent().revalidate(); // Revalida el layout del contenedor
            }
        });
        
        return  myButton;
    }
    
    private enum VisibilityState {
        VER_PRESTAMOS,
        VER_ESTADISTICAS,
        LISTAR_CONFERENCIAS,
        LISTAR_ORGANIZADORES,
        LISTAR_ARTICULOS,
        NONE
    }

    private void setVisibility(VisibilityState state) {
        for (JInternalFrame frame : internalFrames.values()) {
            frame.setVisible(false);
        }

        switch (state) {
            case VER_PRESTAMOS -> setFrameVisible(VtnVerArticulosEnviadosConferencias.class);
            case VER_ESTADISTICAS -> setFrameVisible(VtnVerEstadisticas.class);
            case LISTAR_CONFERENCIAS -> setFrameVisible(VtnListarConferencias.class);
            case LISTAR_ORGANIZADORES -> setFrameVisible(VtnListarOrganizadores.class);
            case LISTAR_ARTICULOS -> setFrameVisible(VtnListarArticulos.class);
            case NONE -> {
            }
        }
    }

    private void setFrameVisible(Class<? extends JInternalFrame> frameClass) {
        JInternalFrame frame = internalFrames.get(frameClass);
        if (frame != null) {
            frame.setVisible(true);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
